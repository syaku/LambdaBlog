// Generated by CoffeeScript 1.10.0
var _, articleTemplate, async, aws, buildArticle, buildIndex, categoryTemplate, ejs, indexTemplate, marked, moment, read, s3, settings;

read = require('fs').readFileSync;

aws = require('aws-sdk');

moment = require('moment');

_ = require('underscore');

async = require('async');

ejs = require('ejs');

marked = require('marked');

s3 = new aws.S3();

_.mixin({
  chunk: function(array, size) {
    return _.chain(array).groupBy(function(element, index) {
      return Math.floor(index / size);
    }).toArray().value();
  }
});

settings = {
  bucketName: 'test-lambda-backet',
  publishBucket: 'blog-public-bucket',
  postsDir: 'posts/',
  baseDir: ''
};

indexTemplate = ejs.compile(read('./template/index.ejs', 'utf8'), {
  filename: './template/index.ejs'
});

categoryTemplate = ejs.compile(read('./template/article.ejs', 'utf8'), {
  filename: './template/article.ejs'
});

articleTemplate = ejs.compile(read('./template/article.ejs', 'utf8'), {
  filename: './template/article.ejs'
});

buildArticle = function(pair, callback) {
  var key, post;
  key = pair[0];
  post = pair[1];
  return s3.getObject({
    Bucket: settings.bucketName,
    Key: "" + settings.postsDir + key
  }, function(err, data) {
    var htmlBody, publishDate;
    if (err) {
      return callback(err);
    } else {
      publishDate = moment(post.publishDate);
      htmlBody = articleTemplate({
        title: post.title,
        body: marked(data.Body.toString('UTF-8'))
      });
      return s3.putObject({
        Bucket: settings.publishBucket,
        Key: (publishDate.format('YYYY/MM/DD')) + "/" + key + "/index.html",
        Body: htmlBody,
        ContentType: 'text/html'
      }, function(err, data) {
        if (err) {
          console.log(err);
        }
        return callback();
      });
    }
  });
};

buildIndex = function(config, callback) {
  var chunks, cnt;
  chunks = _.chain(config.posts).pairs().sortBy(function(pair) {
    return moment(pair[0].publishDate).valueOf() * -1;
  }).chunk(10).value();
  console.log(chunks);
  cnt = 1;
  return async.each(chunks, function(chunk, callback) {
    var articles, body, filename;
    articles = _.chain(chunk).map(function(pair) {
      return {
        key: pair[0],
        title: pair[1].title,
        publishDate: moment(pair[1].publishDate)
      };
    }).sortBy(function(article) {
      return article.publishDate.valueOf() * -1;
    }).value();
    body = indexTemplate({
      title: 'SEVENSPIRALS',
      articles: articles
    });
    if (cnt > 1) {
      filename = "index" + cnt + ".html";
    } else {
      filename = "index.html";
    }
    return s3.putObject({
      Bucket: settings.publishBucket,
      Key: filename,
      Body: body,
      ContentType: 'text/html'
    }, function(err, data) {
      cnt++;
      return callback();
    });
  }, function(err) {
    return callback(null, config);
  });
};

exports.handler = function(event, context) {
  return async.waterfall([
    function(callback) {
      return s3.getObject({
        Bucket: settings.bucketName,
        Key: 'config.json'
      }, function(err, data) {
        if (err) {
          return context.done('no data.');
        } else {
          return callback(null, JSON.parse(data.Body.toString('UTF-8')));
        }
      });
    }, function(config, callback) {
      var pairs;
      pairs = _.pairs(config.posts);
      return async.each(pairs, buildArticle, function(err) {
        return callback(err, config);
      });
    }, buildIndex
  ], function(err) {
    return context.succeed('scuccess.');
  });
};
